
#include "io.hpp"
#include <iostream>


namespace math_core {



  //========================================================================

  std::ostream& operator<< (std::ostream& os, const nd_point_t& p ) {
    os << "(";
    for( int64_t i = 0; i < p.n - 1; ++i ) {
      os << p.coordinate[i] << ",";
    }
    if( p.n > 0 ) {
      os << p.coordinate[ p.n - 1 ];
    }
    os << ")";
    return os;
  }

  //========================================================================
  
  std::ostream& operator<< (std::ostream& os, const nd_vector_t& v ) {
    os << "[";
    for( int64_t i = 0; i < v.n - 1; ++i ) {
      os << v.component[i] << ",";
    }
    if( v.n > 0 ) {
      os << v.component[ v.n - 1 ];
    }
    os << "]";
    return os;
  }

  //========================================================================

  std::ostream& operator<< (std::ostream& os, const nd_direction_t& d ) {
    os << "<";
    for( int64_t i = 0; i < d.n - 1; ++i ) {
      os << d.value[i] << ",";
    }
    if( d.n > 0 ) {
      os << d.value[ d.n - 1 ];
    }
    os << ">";
    return os;
  }

  //========================================================================

  std::ostream& operator<< (std::ostream& os, const line_t& line )
  {
    os << "{Line " << line.origin << " " << line.direction << "}";
    return os;
  }

  //========================================================================

  std::ostream& operator<< (std::ostream& os, const line_segment_t& segment )
  {
    os << "{Seg " << segment.start << " " << segment.end << "}";
    return os;
  }

  //========================================================================

  std::ostream& operator<< (std::ostream& os, const nd_aabox_t& box )
  {
    os << "{Box " << box.start << " " << box.end << "}";
    return os;
  }

  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================
  //========================================================================



}
